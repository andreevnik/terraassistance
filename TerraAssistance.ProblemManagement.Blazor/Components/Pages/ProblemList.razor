@page "/problems"

@using MediatR
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using TerraAssistance.ProblemManagement.Application.Commands
@using TerraAssistance.ProblemManagement.Blazor.Data
@using TerraAssistance.ProblemManagement.Blazor.Data.Constants
@using TerraAssistance.ProblemManagement.Blazor.Extensions
@using TerraAssistance.ProblemManagement.Blazor.Security
@using TerraAssistance.ProblemManagement.Domain.Entities
@using TerraAssistance.ProblemManagement.Domain.Enums
@using TerraAssistance.ProblemManagement.Domain.Interfaces

@inject IProblemRepository problemRepository
@inject UserManager userManager
@inject IHttpContextAccessor httpContextAccessor
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime jsRuntime
@inject IMediator mediator

@rendermode InteractiveServer

@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Problems</PageTitle>

<h1>Problems</h1>

<a class="btn btn-primary mb-3" href="problems/create">
    <span class="bi bi-plus-lg" aria-hidden="true"></span> Create New Problem
</a>

@if (problems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Date</th>
                <th>Status</th>
                <th>Author</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var problem in problems)
            {
                <tr>
                    <td>
                        <a href="problems/@problem.Id">@problem.Title</a>
                    </td>
                    <td>@problem.CreatedAt</td>
                    <td>@problem.Status</td>
                    <td>@problem.Author</td>
                    <td>
                        <button class="btn btn-sm btn-danger"
                            @onclick="async () => await DeleteProblemAsync(problem.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<ProblemModel>? problems;

    protected override async Task OnInitializedAsync()
    {
        var cancellationToken = httpContextAccessor.HttpContext?.RequestAborted ?? CancellationToken.None;
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();

        var currentUser = await userManager.GetUserAsync(authenticationState.User)
        ?? throw new InvalidOperationException("User not found");

        var users = await userManager.Users.ToDictionaryAsync(user => user.Id, user => user, cancellationToken);

        var problemList = await problemRepository.GetAllAsync(cancellationToken);

        problems = problemList.Select(problem => new ProblemModel(
        problem,
        problem.CreatedById == currentUser.Id ? string.Empty : users[problem.CreatedById].FullName));
    }

    private async Task DeleteProblemAsync(int problemId)
    {
        var command = new DeleteProblemCommand(problemId);

        try
        {
            await mediator.Send(command);
        }
        catch (Exception exception)
        {
            await jsRuntime.ShowError(exception);
        }

        await jsRuntime.ShowMessage("Problem deleted successfully.");
        await OnInitializedAsync();
    }

    private sealed class ProblemModel
    {
        public ProblemModel(Problem problem, string author)
        {
            Id = problem.Id;
            Title = problem.Title;
            CreatedAt = problem.CreatedAt;
            Status = problem.Status;
            Author = author;
        }

        public int Id { get; }

        public string Title { get; }

        public DateTime CreatedAt { get; }

        public ProblemStatus Status { get; }

        public string Author { get; }
    }
}